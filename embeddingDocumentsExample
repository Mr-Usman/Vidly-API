const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost/playground')
    .then(() => console.log('Connected to MongoDB...'))
    .catch(err => console.error('Could not connect to MongoDB...', err));

const authorSchema = new mongoose.Schema({
    name: String,
    bio: String,
    website: String
});

const Author = mongoose.model('Author', authorSchema);

const Course = mongoose.model('Course', new mongoose.Schema({
    name: String,
    // if we want to store an array of authorSchems
    authors : [ authorSchema ]
    // for store a single document
    author: {
        type: authorSchema,
        required: true
    }
}));

async function createCourse(name, author) {
    const course = new Course({
        name,
        author
    });

    const result = await course.save();
    console.log(result);
}

async function listCourses() {
    const courses = await Course.find();
    console.log(courses);
}

// async function updateAuthor(courseId){
//   const course = await Course.findById(courseId)
//   course.author.name = "Mosh hamedani"
//   course.save()
// }

// another method to directly updated document on database

async function updateAuthor(courseId) {
    const course = await Course.update({ _id: courseId }, {
        $set: { // $unset is used to remove the subdocument or its properties
            // define here updated fields
        }
    })
}

async function addAuthor(courseId, author){
    const course = await Course.findById(courseId);
    course.authors.push(author)
    course.save()
}

async function removeAuthor(courseId, authorId){
    const course = await Course.findById(courseId);
    const author = course.author.id(authorId)
    author.remove()
    course.save()
}

createCourse('Node Course', new Author({ name: 'Mosh' }));
updateAuthor(courseId)